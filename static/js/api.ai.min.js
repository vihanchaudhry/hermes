!function () {
    function e(e) {
        function t() {
        }

        var r = e || {}, i = this;
        i.server = r.server || "", i.token = r.token || "", i.sessionId = r.sessionId || "", i.lang = r.lang || "en", i.contentType = r.contentType || n, i.readingInterval = r.readingInterval || o, i.onOpen = r.onOpen && r.onOpen.bind(i) || t, i.onClose = r.onClose && r.onClose.bind(i) || t, i.onInit = r.onInit && r.onInit.bind(i) || t, i.onStartListening = r.onStartListening && r.onStartListening.bind(i) || t, i.onStopListening = r.onStopListening && r.onStopListening.bind(i) || t, i.onResults = r.onResults && r.onResults.bind(i) || t, i.onEvent = r.onEvent && r.onEvent.bind(i) || t, i.onError = r.onError && r.onError.bind(i) || t
    }

    var n = "content-type=audio/x-raw,+layout=(string)interleaved,+rate=(int)16000,+format=(string)S16LE,+channels=(int)1", o = 250, t = "EOS", r = 2, i = 3, s = 4, a = 5, c = 1, d = 2, p = 3, u = 5, l = 6, v = 7, w = 8, f = 9, S = 10, g = 11;
    e.prototype.init = function () {
        function e(e, o) {
            n.mediaStreamSource = n.audio_context.createMediaStreamSource(o), n.onEvent(d, "Media stream created"), window.userSpeechAnalyser = n.audio_context.createAnalyser(), n.mediaStreamSource.connect(window.userSpeechAnalyser), n.recorder = new Recorder(n.mediaStreamSource), n.onEvent(p, "Recorder initialized"), e && e()
        }

        var n = this;
        n.onEvent(c, "Waiting for approval to access your microphone ...");
        try {
            window.AudioContext = window.AudioContext || window.webkitAudioContext, navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia, window.URL = window.URL || window.webkitURL, n.audio_context = new AudioContext
        } catch (o) {
            n.onError(a, "Error initializing Web Audio browser: " + JSON.stringify(o))
        }
        navigator.getUserMedia ? navigator.getUserMedia({audio: !0}, e.bind(null, n.onInit), function (e) {
            n.onError(a, "No live audio input in this browser: " + JSON.stringify(e))
        }) : n.onError(a, "No user media support")
    }, e.prototype.isInitialise = function () {
        return !!this.recorder
    }, e.prototype.sendJson = function (e) {
        this._socketSend(JSON.stringify(e)), this._socketSend(t)
    }, e.prototype.startListening = function () {
        function e(e) {
            n.resample_processor = n.audio_context.createResampleProcessor(256, 1, 1, 16e3), n.mediaStreamSource.connect(n.resample_processor);
            var o = n.audio_context.createEndOfSpeechProcessor(256);
            o.endOfSpeechCallback = e, n.resample_processor.connect(o)
        }

        var n = this, o = n.recorder;
        return o ? n.ws ? (e(function () {
            n.stopListening()
        }), n.ws.send("{'timezone':'America/New_York', 'lang':'" + n.lang + "', 'sessionId':'" + n.sessionId + "'}"), n.intervalKey = setInterval(function () {
            o.export16kMono(function (e) {
                n._socketSend(e), o.clear()
            }, "audio/x-raw")
        }, n.readingInterval), o.record(), void n.onStartListening()) : void n.onError(i, "No web socket connection") : void n.onError(i, "Recorder undefined")
    }, e.prototype.stopListening = function () {
        var e = this;
        e.resample_processor && e.resample_processor.disconnect(), clearInterval(e.intervalKey);
        var n = e.recorder;
        return n ? (n.stop(), e.onEvent(g, "Stopped recording"), n.export16kMono(function (o) {
            e._socketSend(o), e._socketSend(t), n.clear()
        }, "audio/x-raw"), void e.onStopListening()) : void e.onError(i, "Recorder undefined")
    }, e.prototype.isOpen = function () {
        return !!this.ws
    }, e.prototype.open = function () {
        function e() {
            function e() {
                var e = n.server + "?" + n.contentType + "&access_token=" + n.token, o = new WebSocket(e);
                return o.onmessage = function (e) {
                    var o = e.data;
                    n.onEvent(w, o), o instanceof Object && !(o instanceof Blob) ? n.onError(s, "WebSocket: onEvent: got Object that is not a Blob") : o instanceof Blob ? n.onError(s, "WebSocket: got Blob") : n.onResults(JSON.parse(o))
                }, o.onopen = function (e) {
                    n.onOpen(), n.onEvent(f, e)
                }, o.onclose = function (e) {
                    n.onClose(), n.onEvent(S, e.code + "/" + e.reason + "/" + e.wasClean)
                }, o.onerror = function (e) {
                    n.onError(r, JSON.stringify(e.data))
                }, o
            }

            if (!n.recorder)return void n.onError(i, "Recorder undefined");
            n.ws && n.close();
            try {
                n.ws = e()
            } catch (o) {
                n.onError(a, "No web socket support in this browser!")
            }
        }

        var n = this;
        this.recorder ? e() : this.init(e)
    }, e.prototype.close = function () {
        var e = this;
        clearInterval(e.intervalKey), e.recorder && (e.recorder.stop(), e.recorder.clear(), e.onEvent(g, "Stopped recording")), e.ws && (e.ws.close(), e.ws = null)
    }, e.prototype._socketSend = function (e) {
        var n = this;
        if (!n.ws)return void n.onError(a, "No web socket connection: failed to send: " + e);
        var o = n.ws.readyState;
        if (1 != o) {
            var t = "WebSocket: ";
            switch (o) {
                case 0:
                    t += "The connection is not yet open.";
                    break;
                case 2:
                    t += "The connection is in the process of closing.";
                    break;
                case 3:
                    t += "The connection is closed or couldn't be opened."
            }
            t += " readyState=" + o + " (!=1) failed to send: " + e, n.onError(r, t)
        }
        e instanceof Blob ? e.size > 0 ? (n.ws.send(e), n.onEvent(u, "Send: blob: " + e.type + ", " + e.size)) : n.onEvent(l, "Send: blob: " + e.type + ", EMPTY") : (n.ws.send(e), n.onEvent(v, "Send string: " + e))
    }, window.ApiAi = e
}();